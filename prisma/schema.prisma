// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  profile         Profile?
  MoviesHistory   MoviesHistory[]
  EpisodesHistory EpisodesHistory[]
  Watchlist       Watchlist[]
  following       User[]            @relation("UserFollowers")
  followers       User[]            @relation("UserFollowers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  username String  @id @unique
  adult    Boolean @default(false)
  language String  @default("en")
  region   String  @default("GB")
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@fulltext([username])
}

model Movies {
  id            Int             @id
  title         String
  poster        String
  MoviesHistory MoviesHistory[]
  WatchlistItem WatchlistItem[]
}

model MoviesHistory {
  id       String   @id @default(cuid())
  datetime DateTime
  user_id  String
  movie_id Int
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  movie    Movies   @relation(fields: [movie_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([movie_id])
}

model Series {
  id              Int               @id
  name            String
  poster          String
  seasons         Seasons[]
  EpisodesHistory EpisodesHistory[]
  WatchlistItem   WatchlistItem[]
}

model Seasons {
  id            Int        @id
  name          String
  poster        String
  season_number Int?
  Series        Series?    @relation(fields: [series_id], references: [id], onDelete: Cascade)
  series_id     Int?
  episodes      Episodes[]

  @@index([series_id])
}

model Episodes {
  id             Int       @id
  name           String
  episode_number Int
  season_number  Int?
  Seasons        Seasons?  @relation(fields: [seasons_id], references: [id], onDelete: Cascade)
  seasons_id     Int?
  air_date       DateTime?

  @@index([seasons_id])
}

model EpisodesHistory {
  id             String   @id @default(cuid())
  datetime       DateTime
  user_id        String
  series_id      Int
  season_number  Int
  episode_number Int
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  series         Series   @relation(fields: [series_id], references: [id], onDelete: Cascade)

  @@index([series_id])
  @@index([user_id])
}

model Watchlist {
  id            String          @id @default(cuid())
  user_id       String          @unique
  user          User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  WatchlistItem WatchlistItem[]
}

model WatchlistItem {
  id           String    @id @default(cuid())
  watchlist_id String
  movie_id     Int?
  series_id    Int?
  movies       Movies?   @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  series       Series?   @relation(fields: [series_id], references: [id], onDelete: Cascade)
  watchlist    Watchlist @relation(fields: [watchlist_id], references: [id], onDelete: Cascade)

  @@index([movie_id])
  @@index([series_id])
  @@index([watchlist_id])
}
