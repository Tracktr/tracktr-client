// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "filteredRelationCount"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  profile              Profile?
  MoviesHistory        MoviesHistory[]
  EpisodesHistory      EpisodesHistory[]
  Watchlist            Watchlist[]
  following            User[]                 @relation("UserFollowers")
  followers            User[]                 @relation("UserFollowers")
  MoviesReviews        MoviesReviews[]
  SeriesReviews        SeriesReviews[]
  SeasonsReviews       SeasonsReviews[]
  EpisodesReviews      EpisodesReviews[]
  MoviesReviewsLikes   MoviesReviewsLikes[]
  SeriesReviewsLikes   SeriesReviewsLikes[]
  SeasonsReviewsLikes  SeasonsReviewsLikes[]
  EpisodesReviewsLikes EpisodesReviewsLikes[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  USER
}

model Profile {
  username   String   @id @unique
  adult      Boolean  @default(false)
  language   String   @default("en")
  region     String   @default("GB")
  signUpDate DateTime @default(now())
  role       Role     @default(USER)
  private    Boolean  @default(false)
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@fulltext([username])
}

model Movies {
  id            Int             @id
  title         String
  poster        String
  release_date  DateTime?
  MoviesHistory MoviesHistory[]
  WatchlistItem WatchlistItem[]
  Reviews       MoviesReviews[]
}

model MoviesHistory {
  id       String   @id @default(cuid())
  datetime DateTime
  user_id  String
  movie_id Int
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  movie    Movies   @relation(fields: [movie_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([movie_id])
}

model MoviesReviews {
  id                 String               @id @default(cuid())
  content            String               @db.VarChar(512)
  created            DateTime             @default(now())
  updated            DateTime?
  approved           Boolean              @default(false)
  user_id            String
  movie_id           Int
  Movies             Movies               @relation(fields: [movie_id], references: [id])
  user               User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  MoviesReviewsLikes MoviesReviewsLikes[]

  @@unique([user_id, movie_id])
  @@index([movie_id])
  @@index([user_id])
}

model MoviesReviewsLikes {
  id              String        @id @default(cuid())
  review          MoviesReviews @relation(fields: [moviesReviewsId], references: [id], onDelete: Cascade)
  likedBy         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  moviesReviewsId String
  userId          String

  @@unique([moviesReviewsId, userId])
  @@index([moviesReviewsId])
  @@index([userId])
}

model Series {
  id              Int               @id
  name            String
  poster          String
  seasons         Seasons[]
  EpisodesHistory EpisodesHistory[]
  WatchlistItem   WatchlistItem[]
  SeriesReviews   SeriesReviews[]
}

model SeriesReviews {
  id                 String               @id @default(cuid())
  content            String               @db.VarChar(512)
  created            DateTime             @default(now())
  updated            DateTime?
  approved           Boolean              @default(false)
  user_id            String
  series_id          Int
  Series             Series               @relation(fields: [series_id], references: [id])
  user               User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  SeriesReviewsLikes SeriesReviewsLikes[]

  @@unique([user_id, series_id])
  @@index([series_id])
  @@index([user_id])
}

model SeriesReviewsLikes {
  id              String        @id @default(cuid())
  review          SeriesReviews @relation(fields: [seriesReviewsId], references: [id], onDelete: Cascade)
  likedBy         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  seriesReviewsId String
  userId          String

  @@unique([seriesReviewsId, userId])
  @@index([seriesReviewsId])
  @@index([userId])
}

model Seasons {
  id            Int     @id
  name          String
  poster        String
  season_number Int?
  series_id     Int?
  Series        Series? @relation(fields: [series_id], references: [id], onDelete: Cascade)

  episodes        Episodes[]
  SeasonsReviews  SeasonsReviews[]
  EpisodesHistory EpisodesHistory[]

  @@index([series_id])
}

model SeasonsReviews {
  id                  String                @id @default(cuid())
  content             String                @db.VarChar(512)
  created             DateTime              @default(now())
  updated             DateTime?
  approved            Boolean               @default(false)
  user_id             String
  seasons_id          Int
  Seasons             Seasons               @relation(fields: [seasons_id], references: [id])
  user                User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  SeasonsReviewsLikes SeasonsReviewsLikes[]

  @@unique([user_id, seasons_id])
  @@index([seasons_id])
  @@index([user_id])
}

model SeasonsReviewsLikes {
  id               String         @id @default(cuid())
  review           SeasonsReviews @relation(fields: [seasonsReviewsId], references: [id], onDelete: Cascade)
  likedBy          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  seasonsReviewsId String
  userId           String

  @@unique([seasonsReviewsId, userId])
  @@index([seasonsReviewsId])
  @@index([userId])
}

model Episodes {
  id              Int               @id
  name            String
  episode_number  Int
  season_number   Int?
  Seasons         Seasons?          @relation(fields: [seasons_id], references: [id], onDelete: Cascade)
  seasons_id      Int?
  air_date        DateTime?
  EpisodesReviews EpisodesReviews[]
  EpisodesHistory EpisodesHistory[]

  @@index([seasons_id])
}

model EpisodesReviews {
  id                   String                 @id @default(cuid())
  content              String                 @db.VarChar(512)
  created              DateTime               @default(now())
  updated              DateTime?
  approved             Boolean                @default(false)
  user_id              String
  episodes_id          Int
  Episodes             Episodes               @relation(fields: [episodes_id], references: [id])
  user                 User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  EpisodesReviewsLikes EpisodesReviewsLikes[]

  @@unique([user_id, episodes_id])
  @@index([episodes_id])
  @@index([user_id])
}

model EpisodesReviewsLikes {
  id                String          @id @default(cuid())
  review            EpisodesReviews @relation(fields: [episodesReviewsId], references: [id], onDelete: Cascade)
  likedBy           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  episodesReviewsId String
  userId            String

  @@unique([episodesReviewsId, userId])
  @@index([episodesReviewsId])
  @@index([userId])
}

model EpisodesHistory {
  id         String   @id @default(cuid())
  datetime   DateTime
  user_id    String
  series_id  Int
  season_id  Int
  episode_id Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  season     Seasons  @relation(fields: [season_id], references: [id], onDelete: Cascade)
  episode    Episodes @relation(fields: [episode_id], references: [id], onDelete: Cascade)
  series     Series   @relation(fields: [series_id], references: [id], onDelete: Cascade)

  @@index([episode_id])
  @@index([season_id])
  @@index([series_id])
  @@index([user_id])
}

model Watchlist {
  id            String          @id @default(cuid())
  user_id       String          @unique
  user          User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  WatchlistItem WatchlistItem[]
}

model WatchlistItem {
  id           String    @id @default(cuid())
  watchlist_id String
  created      DateTime  @default(now())
  movie_id     Int?
  series_id    Int?
  movies       Movies?   @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  series       Series?   @relation(fields: [series_id], references: [id], onDelete: Cascade)
  watchlist    Watchlist @relation(fields: [watchlist_id], references: [id], onDelete: Cascade)

  @@index([movie_id])
  @@index([series_id])
  @@index([watchlist_id])
}

model Feedback {
  id      String   @id @default(cuid())
  email   String
  message String   @db.VarChar(512)
  created DateTime @default(now())
}
